import "@radix-ui/themes/styles.css";
import "./theme-config.css";
import "./globals.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { Theme } from "@radix-ui/themes";
import NavBar from "./NavBar";
import AuthProvider from "./auth/Provider";
import QueryClientProvider from "./QueryClientProvider";

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-inter",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.variable}>
        <QueryClientProvider>
          <AuthProvider>
            <Theme accentColor="violet">
              <NavBar />
              <main className="p-0 w-full min-h-screen bg-zinc-950">
                {children}
              </main>
            </Theme>
          </AuthProvider>
        </QueryClientProvider>
      </body>
    </html>
  );
}

// This file is used to set up the global layout for the application, including the theme and authentication context.
// It imports necessary styles, sets up metadata, and defines the main structure of the application layout.
// The `RootLayout` component wraps the application in a theme provider and an authentication provider, ensuring that the theme and authentication state are available throughout the app.

// The `QueryClientProvider` is used to manage server state with React Query, allowing for efficient data fetching and caching. 

// The `NavBar` component is included to provide navigation links, and the main content of the application is rendered within a styled main element.
// Authentication is handled through the `AuthProvider`, which provides user authentication context to the application.
// The `Theme` component from Radix UI is used to apply a consistent theme across the application, with a specified accent color.
// The `Inter` font from Google Fonts is applied globally to ensure a consistent typography style across the application.
// {children} represents the dynamic content of the application, allowing for different pages or components to be rendered within the layout.
